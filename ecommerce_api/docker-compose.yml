version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ecommerce-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: ecommerce_user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Application
  app:
    build: .
    container_name: ecommerce-api
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_URL: jdbc:mysql://mysql:3306/ecommerce_db?useSSL=false&serverTimezone=UTC
      DB_USERNAME: ecommerce_user
      DB_PASSWORD: password
      JWT_SECRET: mySecretKey123456789012345678901234567890
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GRAPHITE_HOST: graphite
      GRAPHITE_PORT: 2003
    ports:
      - "8080:8080"
    networks:
      - ecommerce-network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - ecommerce-network

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ecommerce-network

  # Graphite for Metrics
  graphite:
    image: graphiteapp/graphite-statsd
    container_name: ecommerce-graphite
    ports:
      - "2003:2003"
      - "2004:2004"
      - "7002:7002"
      - "8125:8125/udp"
      - "8126:8126"
    volumes:
      - graphite_data:/opt/graphite/storage
    networks:
      - ecommerce-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ecommerce-network

volumes:
  mysql_data:
  redis_data:
  grafana_data:
  graphite_data:
  prometheus_data:
  app_logs:

networks:
  ecommerce-network:
    driver: bridge

pipeline {
    agent any
    
    tools {
        maven 'Maven-3.8.1'
        jdk 'OpenJDK-17'
    }
    
    environment {
        DOCKER_HUB_REGISTRY = 'your-dockerhub-username'
        DOCKER_IMAGE_NAME = 'ecommerce-api'
        SONAR_HOST_URL = 'http://sonarqube:9000'
        SONAR_TOKEN = credentials('sonar-token')
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        KUBECONFIG = credentials('kubeconfig-file')
        AWS_DEFAULT_REGION = 'us-west-2'
        ECR_REPOSITORY_URI = '123456789012.dkr.ecr.us-west-2.amazonaws.com/ecommerce-api'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_HASH = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.BUILD_VERSION = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_HASH}"
                }
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                    publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                sh 'mvn verify -P integration-tests'
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'target/failsafe-reports/*.xml'
                }
            }
        }
        
        stage('Code Quality Analysis') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh '''
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=ecommerce-api \
                                    -Dsonar.host.url=${SONAR_HOST_URL} \
                                    -Dsonar.login=${SONAR_TOKEN}
                            '''
                        }
                    }
                }
                
                stage('OWASP Dependency Check') {
                    steps {
                        dependencyCheck additionalArguments: '--format HTML --format XML', odcInstallation: 'OWASP-Dependency-Check'
                        dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Package') {
            steps {
                sh 'mvn package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
        
        stage('Docker Build & Scan') {
            steps {
                script {
                    // Build Docker image
                    def dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${BUILD_VERSION}")
                    
                    // Security scan with Trivy
                    sh """
                        trivy image --exit-code 0 --severity HIGH,CRITICAL \
                        --format template --template '@contrib/sarif.tpl' \
                        -o trivy-results.sarif ${DOCKER_IMAGE_NAME}:${BUILD_VERSION}
                    """
                    
                    // Publish security scan results
                    publishSecurityScanResults additionalArguments: '', tool: 'TRIVY'
                    
                    // Tag for registry
                    dockerImage.tag("latest")
                    dockerImage.tag("${BUILD_VERSION}")
                    
                    env.DOCKER_IMAGE = dockerImage.id
                }
            }
        }
        
        stage('Push to Registry') {
            parallel {
                stage('Docker Hub') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                docker.image("${DOCKER_IMAGE_NAME}:${BUILD_VERSION}").push()
                                docker.image("${DOCKER_IMAGE_NAME}:latest").push()
                            }
                        }
                    }
                }
                
                stage('AWS ECR') {
                    steps {
                        script {
                            sh """
                                aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                                docker login --username AWS --password-stdin ${ECR_REPOSITORY_URI}
                                
                                docker tag ${DOCKER_IMAGE_NAME}:${BUILD_VERSION} ${ECR_REPOSITORY_URI}:${BUILD_VERSION}
                                docker tag ${DOCKER_IMAGE_NAME}:latest ${ECR_REPOSITORY_URI}:latest
                                
                                docker push ${ECR_REPOSITORY_URI}:${BUILD_VERSION}
                                docker push ${ECR_REPOSITORY_URI}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    // Update Kubernetes deployment
                    sh """
                        sed -i 's|{{IMAGE_TAG}}|${BUILD_VERSION}|g' k8s/staging/deployment.yaml
                        kubectl apply -f k8s/staging/ --namespace=staging
                        kubectl rollout status deployment/ecommerce-api --namespace=staging
                    """
                    
                    // Wait for deployment to be ready
                    timeout(time: 5, unit: 'MINUTES') {
                        sh 'kubectl wait --for=condition=ready pod -l app=ecommerce-api --namespace=staging'
                    }
                }
            }
        }
        
        stage('Smoke Tests') {
            steps {
                script {
                    // Health check
                    sh """
                        sleep 30
                        curl -f http://staging.ecommerce-api.local/actuator/health || exit 1
                    """
                    
                    // API tests
                    sh 'mvn test -Dtest=SmokeTests -Dapi.base.url=http://staging.ecommerce-api.local'
                }
            }
        }
        
        stage('Performance Tests') {
            steps {
                script {
                    // JMeter performance tests
                    sh """
                        jmeter -n -t performance-tests/load-test.jmx \
                        -Jhost=staging.ecommerce-api.local \
                        -Jport=80 \
                        -l performance-results.jtl \
                        -e -o performance-report
                    """
                    
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'performance-report',
                        reportFiles: 'index.html',
                        reportName: 'Performance Report'
                    ])
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Manual approval for production deployment
                    input message: 'Deploy to Production?', ok: 'Deploy',
                          submitterParameter: 'APPROVER'
                    
                    // Blue-Green deployment
                    sh """
                        # Update production deployment
                        sed -i 's|{{IMAGE_TAG}}|${BUILD_VERSION}|g' k8s/production/deployment.yaml
                        kubectl apply -f k8s/production/ --namespace=production
                        
                        # Wait for rollout
                        kubectl rollout status deployment/ecommerce-api --namespace=production
                        
                        # Update ingress to point to new version
                        kubectl patch ingress ecommerce-api-ingress --namespace=production -p '{"spec":{"rules":[{"host":"api.ecommerce.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"ecommerce-api","port":{"number":8080}}}}]}}]}}'
                    """
                }
            }
        }
        
        stage('Post-Deployment Verification') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Production health checks
                    sh """
                        sleep 60
                        curl -f https://api.ecommerce.com/actuator/health || exit 1
                        
                        # Run production smoke tests
                        mvn test -Dtest=ProductionSmokeTests -Dapi.base.url=https://api.ecommerce.com
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images
            sh 'docker rmi ${DOCKER_IMAGE_NAME}:${BUILD_VERSION} || true'
            sh 'docker rmi ${DOCKER_IMAGE_NAME}:latest || true'
            
            // Archive logs
            archiveArtifacts artifacts: 'target/logs/*.log', allowEmptyArchive: true
        }
        
        success {
            // Notify success
            slackSend channel: '#deployments',
                     color: 'good',
                     message: "✅ Pipeline succeeded for ${env.JOB_NAME} - ${env.BUILD_NUMBER}\nCommit: ${env.GIT_COMMIT_HASH}\nApproved by: ${env.APPROVER ?: 'Auto'}"
        }
        
        failure {
            // Notify failure
            slackSend channel: '#deployments',
                     color: 'danger',
                     message: "❌ Pipeline failed for ${env.JOB_NAME} - ${env.BUILD_NUMBER}\nCommit: ${env.GIT_COMMIT_HASH}"
        }
        
        unstable {
            // Notify unstable build
            slackSend channel: '#deployments',
                     color: 'warning',
                     message: "⚠️ Pipeline unstable for ${env.JOB_NAME} - ${env.BUILD_NUMBER}\nCommit: ${env.GIT_COMMIT_HASH}"
        }
    }
}
